GO_list1 = semi_join(Uniprot_GO,protein1,by="Uniprot_id")
GO_list2 = semi_join(Uniprot_GO,protein2,by="Uniprot_id")
GO_set1 = unlist(GO_list1[,2])
GO_set2 = unlist(GO_list2[,2])
protein_sim[i,j] = mgoSim(GO_set1, GO_set2, semData = GOsim_data, measure="Wang",combine = "BMA")
}
}
return(protein_sim)
}
All_uniprot_MF = read.csv("processed_data/Uniprot_MF.csv",header=T,encoding = "UTF-8")
All_uniprot_BP = read.csv("processed_data/Uniprot_BP.csv",header=T,encoding = "UTF-8")
All_uniprot_CC = read.csv("processed_data/Uniprot_CC.csv",header=T,encoding = "UTF-8")
DTI_protein_id = read.csv("datasets/DTI/Protein_id.csv",header=T)
CPI_protein_id = read.csv("datasets/CPI/protein_id.csv",header=T)
MF_data <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
remove.packages("RSQLite")
remotes::install_version("RSQLite", version = "2.2.1")
library("org.Hs.eg.db")
options(connectionObserver = NULL)
MF_data <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
install.packages("org.Hs.eg.db")
library("org.Hs.eg.db")
install.packages("C:/Users/czx/Desktop/org.Hs.eg.db_3.18.0.tar.gz", repos = NULL, type = "source")
update.packages(AnnotationDbi)
install.packages(AnnotationDbi)
MF_data <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
BiocManager::install("AnnotationDbi")
BiocManager::install("AnnotationDbi", force = TRUE)
BiocManager::valid()
library(org.Hs.eg.db)
MF_data <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
MF_data <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
library(GOSemSim)
library(dplyr)
getwd()
get_similarity_data = function(Uniprot_GO, protein_id, GOsim_data){
colnames(Uniprot_GO)[1] = 'Uniprot_id'
# need_Uniprot_GO = semi_join(Uniprot_GO, protein_id)
n_protein = length(protein_id)
protein_sim = matrix(nr=n_protein,nc=n_protein)
for(i in 1:n_protein){
for(j in 1:n_protein){
protein1 = data.frame(Uniprot_id = protein_id[i])
protein2 = data.frame(Uniprot_id = protein_id[j])
GO_list1 = semi_join(Uniprot_GO,protein1,by="Uniprot_id")
GO_list2 = semi_join(Uniprot_GO,protein2,by="Uniprot_id")
GO_set1 = unlist(GO_list1[,2])
GO_set2 = unlist(GO_list2[,2])
protein_sim[i,j] = mgoSim(GO_set1, GO_set2, semData = GOsim_data, measure="Wang",combine = "BMA")
}
}
return(protein_sim)
}
MF_data <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
MF_data <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
BP_data <- godata('org.Hs.eg.db', ont="BP", computeIC=FALSE)
CC_data <- godata('org.Hs.eg.db', ont="CC", computeIC=FALSE)
DTI_protein_sim_MF = get_similarity_data(All_uniprot_MF, DTI_protein_id, MF_data)
View(DTI_protein_sim_MF)
length(DTI_protein_id)
length(DTI_protein_id[,1])
DTI_protein_id[1]
DTI_protein_id[1,1]
get_similarity_data = function(Uniprot_GO, protein_id, GOsim_data){
colnames(Uniprot_GO)[1] = 'Uniprot_id'
# need_Uniprot_GO = semi_join(Uniprot_GO, protein_id)
n_protein = length(protein_id[,1])
protein_sim = matrix(nr=n_protein,nc=n_protein)
for(i in 1:n_protein){
for(j in 1:n_protein){
protein1 = data.frame(Uniprot_id = protein_id[i,1])
protein2 = data.frame(Uniprot_id = protein_id[j,1])
GO_list1 = semi_join(Uniprot_GO,protein1,by="Uniprot_id")
GO_list2 = semi_join(Uniprot_GO,protein2,by="Uniprot_id")
GO_set1 = unlist(GO_list1[,2])
GO_set2 = unlist(GO_list2[,2])
protein_sim[i,j] = mgoSim(GO_set1, GO_set2, semData = GOsim_data, measure="Wang",combine = "BMA")
}
}
return(protein_sim)
}
DTI_protein_sim_MF = get_similarity_data(All_uniprot_MF, DTI_protein_id, MF_data)
View(DTI_protein_sim_MF)
write.csv(DTI_protein_sim_MF,file="datasets/DTI/protein_sim/MF.csv",row.names =FALSE, col.names = FALSE)
write.csv(DTI_protein_sim_MF,file="datasets/DTI/protein_sim/MF.csv",row.names =FALSE)
cal_all_protein_GO_sim = function(){
# DTI_protein_sim_MF = get_similarity_data(All_uniprot_MF, DTI_protein_id, MF_data)
DTI_protein_sim_BP = get_similarity_data(All_uniprot_BP, DTI_protein_id, BP_data)
DTI_protein_sim_CC = get_similarity_data(All_uniprot_CC, DTI_protein_id, CC_data)
CPI_protein_sim_MF = get_similarity_data(All_uniprot_MF, CPI_protein_id, MF_data)
CPI_protein_sim_BP = get_similarity_data(All_uniprot_BP, CPI_protein_id, BP_data)
CPI_protein_sim_CC = get_similarity_data(All_uniprot_CC, CPI_protein_id, CC_data)
# write.csv(DTI_protein_sim_MF,file="datasets/DTI/protein_sim/MF.csv",row.names =FALSE)
write.csv(DTI_protein_sim_BP,file="datasets/DTI/protein_sim/BP.csv",row.names =FALSE)
write.csv(DTI_protein_sim_CC,file="datasets/DTI/protein_sim/CC.csv",row.names =FALSE)
write.csv(CPI_protein_sim_MF,file="datasets/CPI/protein_sim/MF.csv",row.names =FALSE)
write.csv(CPI_protein_sim_BP,file="datasets/CPI/protein_sim/BP.csv",row.names =FALSE)
write.csv(CPI_protein_sim_CC,file="datasets/CPI/protein_sim/CC.csv",row.names =FALSE)
}
cal_all_protein_GO_sim()
cal_all_protein_GO_sim()
cal_all_protein_GO_sim = function(){
# DTI_protein_sim_MF = get_similarity_data(All_uniprot_MF, DTI_protein_id, MF_data)
# write.csv(DTI_protein_sim_MF,file="datasets/DTI/protein_sim/MF.csv",row.names =FALSE)
print('DTI BP')
DTI_protein_sim_BP = get_similarity_data(All_uniprot_BP, DTI_protein_id, BP_data)
write.csv(DTI_protein_sim_BP,file="datasets/DTI/protein_sim/BP.csv",row.names =FALSE)
print('DTI CC')
DTI_protein_sim_CC = get_similarity_data(All_uniprot_CC, DTI_protein_id, CC_data)
write.csv(DTI_protein_sim_CC,file="datasets/DTI/protein_sim/CC.csv",row.names =FALSE)
print('CPI MF')
CPI_protein_sim_MF = get_similarity_data(All_uniprot_MF, CPI_protein_id, MF_data)
write.csv(CPI_protein_sim_MF,file="datasets/CPI/protein_sim/MF.csv",row.names =FALSE)
print('CPI BP')
CPI_protein_sim_BP = get_similarity_data(All_uniprot_BP, CPI_protein_id, BP_data)
write.csv(CPI_protein_sim_BP,file="datasets/CPI/protein_sim/BP.csv",row.names =FALSE)
print('CPI CC')
CPI_protein_sim_CC = get_similarity_data(All_uniprot_CC, CPI_protein_id, CC_data)
write.csv(CPI_protein_sim_CC,file="datasets/CPI/protein_sim/CC.csv",row.names =FALSE)
}
get_similarity_data = function(Uniprot_GO, protein_id, GOsim_data){
colnames(Uniprot_GO)[1] = 'Uniprot_id'
n_protein = length(protein_id[,1])
protein_sim = matrix(nr=n_protein,nc=n_protein)
for(i in 1:n_protein){
if (i %% 100 == 0){
print(i)
}
for(j in (i+1):n_protein){
protein1 = data.frame(Uniprot_id = protein_id[i,1])
protein2 = data.frame(Uniprot_id = protein_id[j,1])
GO_list1 = semi_join(Uniprot_GO,protein1,by="Uniprot_id")
GO_list2 = semi_join(Uniprot_GO,protein2,by="Uniprot_id")
GO_set1 = unlist(GO_list1[,2])
GO_set2 = unlist(GO_list2[,2])
protein_sim[i,j] = mgoSim(GO_set1, GO_set2, semData = GOsim_data, measure="Wang",combine = "BMA")
protein_sim[j,i] = protein_sim[i,j]
}
}
for(i in 1:n_protein){
protein_sim[i,i] = 1
}
return(protein_sim)
}
cal_all_protein_GO_sim = function(){
# DTI_protein_sim_MF = get_similarity_data(All_uniprot_MF, DTI_protein_id, MF_data)
# write.csv(DTI_protein_sim_MF,file="datasets/DTI/protein_sim/MF.csv",row.names =FALSE)
print('DTI BP')
DTI_protein_sim_BP = get_similarity_data(All_uniprot_BP, DTI_protein_id, BP_data)
write.csv(DTI_protein_sim_BP,file="datasets/DTI/protein_sim/BP.csv",row.names =FALSE)
print('DTI CC')
DTI_protein_sim_CC = get_similarity_data(All_uniprot_CC, DTI_protein_id, CC_data)
write.csv(DTI_protein_sim_CC,file="datasets/DTI/protein_sim/CC.csv",row.names =FALSE)
print('CPI MF')
CPI_protein_sim_MF = get_similarity_data(All_uniprot_MF, CPI_protein_id, MF_data)
write.csv(CPI_protein_sim_MF,file="datasets/CPI/protein_sim/MF.csv",row.names =FALSE)
print('CPI BP')
CPI_protein_sim_BP = get_similarity_data(All_uniprot_BP, CPI_protein_id, BP_data)
write.csv(CPI_protein_sim_BP,file="datasets/CPI/protein_sim/BP.csv",row.names =FALSE)
print('CPI CC')
CPI_protein_sim_CC = get_similarity_data(All_uniprot_CC, CPI_protein_id, CC_data)
write.csv(CPI_protein_sim_CC,file="datasets/CPI/protein_sim/CC.csv",row.names =FALSE)
}
cal_all_protein_GO_sim()
View(DTI_protein_sim_MF)
cal_all_protein_GO_sim()
View(BP_data)
get_similarity_data = function(Uniprot_GO, protein_id, GOsim_data){
colnames(Uniprot_GO)[1] = 'Uniprot_id'
n_protein = length(protein_id[,1])
protein_sim = matrix(nr=n_protein,nc=n_protein)
for(i in 1:(n_protein-1)){
if (i %% 100 == 0){
print(i)
}
for(j in (i+1):n_protein){
protein1 = data.frame(Uniprot_id = protein_id[i,1])
protein2 = data.frame(Uniprot_id = protein_id[j,1])
GO_list1 = semi_join(Uniprot_GO,protein1,by="Uniprot_id")
GO_list2 = semi_join(Uniprot_GO,protein2,by="Uniprot_id")
GO_set1 = unlist(GO_list1[,2])
GO_set2 = unlist(GO_list2[,2])
protein_sim[i,j] = mgoSim(GO_set1, GO_set2, semData = GOsim_data, measure="Wang",combine = "BMA")
protein_sim[j,i] = protein_sim[i,j]
}
}
for(i in 1:n_protein){
protein_sim[i,i] = 1
}
return(protein_sim)
}
cal_all_protein_GO_sim = function(){
# DTI_protein_sim_MF = get_similarity_data(All_uniprot_MF, DTI_protein_id, MF_data)
# write.csv(DTI_protein_sim_MF,file="datasets/DTI/protein_sim/MF.csv",row.names =FALSE)
print('DTI BP')
DTI_protein_sim_BP = get_similarity_data(All_uniprot_BP, DTI_protein_id, BP_data)
write.csv(DTI_protein_sim_BP,file="datasets/DTI/protein_sim/BP.csv",row.names =FALSE)
print('DTI CC')
DTI_protein_sim_CC = get_similarity_data(All_uniprot_CC, DTI_protein_id, CC_data)
write.csv(DTI_protein_sim_CC,file="datasets/DTI/protein_sim/CC.csv",row.names =FALSE)
print('CPI MF')
CPI_protein_sim_MF = get_similarity_data(All_uniprot_MF, CPI_protein_id, MF_data)
write.csv(CPI_protein_sim_MF,file="datasets/CPI/protein_sim/MF.csv",row.names =FALSE)
print('CPI BP')
CPI_protein_sim_BP = get_similarity_data(All_uniprot_BP, CPI_protein_id, BP_data)
write.csv(CPI_protein_sim_BP,file="datasets/CPI/protein_sim/BP.csv",row.names =FALSE)
print('CPI CC')
CPI_protein_sim_CC = get_similarity_data(All_uniprot_CC, CPI_protein_id, CC_data)
write.csv(CPI_protein_sim_CC,file="datasets/CPI/protein_sim/CC.csv",row.names =FALSE)
}
cal_all_protein_GO_sim()
cal_all_protein_GO_sim = function(){
# DTI_protein_sim_MF = get_similarity_data(All_uniprot_MF, DTI_protein_id, MF_data)
# write.csv(DTI_protein_sim_MF,file="datasets/DTI/protein_sim/MF.csv",row.names =FALSE)
# print('DTI BP')
# DTI_protein_sim_BP = get_similarity_data(All_uniprot_BP, DTI_protein_id, BP_data)
# write.csv(DTI_protein_sim_BP,file="datasets/DTI/protein_sim/BP.csv",row.names =FALSE)
# print('DTI CC')
# DTI_protein_sim_CC = get_similarity_data(All_uniprot_CC, DTI_protein_id, CC_data)
# write.csv(DTI_protein_sim_CC,file="datasets/DTI/protein_sim/CC.csv",row.names =FALSE)
print('CPI MF')
CPI_protein_sim_MF = get_similarity_data(All_uniprot_MF, CPI_protein_id, MF_data)
write.csv(CPI_protein_sim_MF,file="datasets/CPI/protein_sim/MF.csv",row.names =FALSE)
print('CPI BP')
CPI_protein_sim_BP = get_similarity_data(All_uniprot_BP, CPI_protein_id, BP_data)
write.csv(CPI_protein_sim_BP,file="datasets/CPI/protein_sim/BP.csv",row.names =FALSE)
print('CPI CC')
CPI_protein_sim_CC = get_similarity_data(All_uniprot_CC, CPI_protein_id, CC_data)
write.csv(CPI_protein_sim_CC,file="datasets/CPI/protein_sim/CC.csv",row.names =FALSE)
}
cal_protein_seq_sim = function(){
DTI_seq = readFASTA("datasets/DTI/protein.fasta")
DTI_seq_Sim = round(calcParProtSeqSim(DTI_seq, cores = 12, type = "local", submat = "BLOSUM62"),6)
id = unlist(DTI_protein_id)
colnames(Sim)=id
rownames(Sim)=id
write.csv(DTI_seq_Sim,file="datasets/DTI/protein_sim/seq.csv",row.names =FALSE)
CPI_seq = readFASTA("datasets/CPI/all_protein.fasta")
CPI_seq_Sim = round(calcParProtSeqSim(CPI_seq, cores = 12, type = "local", submat = "BLOSUM62"),6)
id = unlist(CPI_protein_id)
colnames(Sim)=id
rownames(Sim)=id
write.csv(CPI_seq_Sim,file="datasets/CPI/protein_sim/seq.csv",row.names =FALSE)
}
CPI_protein_id = read.csv("datasets/CPI/all_protein_id.csv",header=T)
cal_all_protein_GO_sim()
rm(list = ls())
cal_protein_seq_sim = function(){
DTI_seq = readFASTA("datasets/DTI/protein.fasta")
DTI_seq_Sim = round(calcParProtSeqSim(DTI_seq, cores = 12, type = "local", submat = "BLOSUM62"),6)
id = unlist(DTI_protein_id)
colnames(Sim)=id
rownames(Sim)=id
write.csv(DTI_seq_Sim,file="datasets/DTI/protein_sim/seq.csv",row.names =FALSE)
CPI_seq = readFASTA("datasets/CPI/all_protein.fasta")
CPI_seq_Sim = round(calcParProtSeqSim(CPI_seq, cores = 12, type = "local", submat = "BLOSUM62"),6)
id = unlist(CPI_protein_id)
colnames(Sim)=id
rownames(Sim)=id
write.csv(CPI_seq_Sim,file="datasets/CPI/protein_sim/seq.csv",row.names =FALSE)
}
cal_protein_seq_sim()
library(Rcpi)
BiocManager::install("Rcpi")
library(Rcpi)
cal_protein_seq_sim = function(){
DTI_seq = readFASTA("datasets/DTI/protein.fasta")
DTI_seq_Sim = round(calcParProtSeqSim(DTI_seq, cores = 12, type = "local", submat = "BLOSUM62"),6)
id = unlist(DTI_protein_id)
colnames(Sim)=id
rownames(Sim)=id
write.csv(DTI_seq_Sim,file="datasets/DTI/protein_sim/seq.csv",row.names =FALSE)
CPI_seq = readFASTA("datasets/CPI/all_protein.fasta")
CPI_seq_Sim = round(calcParProtSeqSim(CPI_seq, cores = 12, type = "local", submat = "BLOSUM62"),6)
id = unlist(CPI_protein_id)
colnames(Sim)=id
rownames(Sim)=id
write.csv(CPI_seq_Sim,file="datasets/CPI/protein_sim/seq.csv",row.names =FALSE)
}
cal_protein_seq_sim()
DTI_protein_id = read.csv("datasets/DTI/Protein_id.csv",header=T)
CPI_protein_id = read.csv("datasets/CPI/all_protein_id.csv",header=T)
cal_protein_seq_sim()
cal_protein_seq_sim = function(){
DTI_seq = readFASTA("datasets/DTI/protein.fasta")
DTI_seq_Sim = round(calcParProtSeqSim(DTI_seq, cores = 12, type = "local", submat = "BLOSUM62"),6)
id = unlist(DTI_protein_id)
colnames(DTI_seq_Sim)=id
rownames(DTI_seq_Sim)=id
write.csv(DTI_seq_Sim,file="datasets/DTI/protein_sim/seq.csv",row.names =FALSE)
CPI_seq = readFASTA("datasets/CPI/all_protein.fasta")
CPI_seq_Sim = round(calcParProtSeqSim(CPI_seq, cores = 12, type = "local", submat = "BLOSUM62"),6)
id = unlist(CPI_protein_id)
colnames(CPI_seq_Sim)=id
rownames(CPI_seq_Sim)=id
write.csv(CPI_seq_Sim,file="datasets/CPI/protein_sim/seq.csv",row.names =FALSE)
}
cal_protein_seq_sim()
rm(list=ls()
rm(list = ls())
getwd()
library(rcdk)
library(philentropy)
library(fingerprint)
# Davis dataset and KIBA dataset
drug_smiles = read.csv("datasets/Davis_5fold/Drug.csv",header=T)
id = drug_smiles[,1]
smiles = drug_smiles[,2]
sp <- get.smiles.parser()
mols <- parse.smiles(smiles)
fps = lapply(mols,get.fingerprint,type='pubchem')
f = fp.to.matrix(fps)
write.csv(f,file="datasets/Davis_5fold/drug_finger/PubChem.csv",row.names =FALSE)
drug_smiles = read.csv("datasets/KIBA_5fold/Drug.csv",header=T)
id = drug_smiles[,1]
smiles = drug_smiles[,2]
sp <- get.smiles.parser()
mols <- parse.smiles(smiles)
fps = lapply(mols,get.fingerprint,type='pubchem')
rm(list = ls())
# KIBA
drug_smiles = read.csv("datasets/KIBA_5fold/Drug.csv",header=T)
id = drug_smiles[,1]
smiles = drug_smiles[,2]
sp <- get.smiles.parser()
mols <- parse.smiles(smiles)
rm(list = ls())
# KIBA
drug_smiles = read.csv("datasets/KIBA_5fold/Drug.csv",header=T)
id = drug_smiles[,1]
smiles = drug_smiles[,2]
sp <- get.smiles.parser()
getwd()
library(rcdk)
library(philentropy)
library(fingerprint)
sp <- get.smiles.parser()
mols <- parse.smiles(smiles)
fps = lapply(mols,get.fingerprint,type='pubchem')
rm(list = ls())
# Davis dataset and KIBA dataset
protein_seq = read.csv("datasets/Davis_5fold/Protein.csv",header=T)
id = protein_seq[,1]
seq = protein_seq[,2]
header_name = matrix(nr=length(id),nc=1)
for(i in 1:length(id))
{
id1 = id[i]
header = paste(id1,1,sep = "|")
header = paste(header,"training",sep = "|")
header_name[i] = header
}
header_name = as.list(header_name)
sequence = as.list(seq)
write.fasta(sequence, names = header_name, file='datasets/Davis_5fold/protein.fasta', open = "w", nbchar = 60, as.string = FALSE)
# get protein fasta to calculate Descriptors
library(seqinr)
write.fasta(sequence, names = header_name, file='datasets/Davis_5fold/protein.fasta', open = "w", nbchar = 60, as.string = FALSE)
# KIBA
protein_seq = read.csv("datasets/KIBA_5fold/Protein.csv",header=T)
id = protein_seq[,1]
seq = protein_seq[,2]
header_name = matrix(nr=length(id),nc=1)
for(i in 1:length(id))
{
id1 = id[i]
header = paste(id1,1,sep = "|")
header = paste(header,"training",sep = "|")
header_name[i] = header
}
header_name = as.list(header_name)
sequence = as.list(seq)
write.fasta(sequence, names = header_name, file='datasets/KIBA_5fold/protein.fasta', open = "w", nbchar = 60, as.string = FALSE)
rm(list = ls())
library(GOSemSim)
library(dplyr)
getwd()
get_similarity_data = function(Uniprot_GO, protein_id, GOsim_data){
colnames(Uniprot_GO)[1] = 'Uniprot_id'
n_protein = length(protein_id[,1])
protein_sim = matrix(nr=n_protein,nc=n_protein)
for(i in 1:(n_protein-1)){
if (i %% 100 == 0){
print(i)
}
for(j in (i+1):n_protein){
protein1 = data.frame(Uniprot_id = protein_id[i,1])
protein2 = data.frame(Uniprot_id = protein_id[j,1])
GO_list1 = semi_join(Uniprot_GO,protein1,by="Uniprot_id")
GO_list2 = semi_join(Uniprot_GO,protein2,by="Uniprot_id")
GO_set1 = unlist(GO_list1[,2])
GO_set2 = unlist(GO_list2[,2])
protein_sim[i,j] = mgoSim(GO_set1, GO_set2, semData = GOsim_data, measure="Wang",combine = "BMA")
protein_sim[j,i] = protein_sim[i,j]
}
}
for(i in 1:n_protein){
protein_sim[i,i] = 1
}
protein_sim[is.na(protein_sim)] <- 0
return(protein_sim)
}
# DTI and CPI protein sim
cal_GO_sim_DK = function(){
print('Davis MF')
Davis_sim_MF = get_similarity_data(Davis_uniprot_MF, Davis_protein_id, MF_data)
write.csv(Davis_sim_MF,file="datasets/Davis_5fold/protein_sim/MF.csv",row.names =FALSE)
print('Davis BP')
Davis_sim_BP = get_similarity_data(Davis_uniprot_BP, Davis_protein_id, BP_data)
write.csv(Davis_sim_BP,file="datasets/Davis_5fold/protein_sim/BP.csv",row.names =FALSE)
print('Davis CC')
Davis_sim_CC = get_similarity_data(Davis_uniprot_CC, Davis_protein_id, CC_data)
write.csv(Davis_sim_CC,file="datasets/Davis_5fold/protein_sim/CC.csv",row.names =FALSE)
print('KIBA MF')
KIBA_sim_MF = get_similarity_data(KIBA_uniprot_MF, KIBA_protein_id, MF_data)
write.csv(KIBA_sim_MF,file="datasets/KIBA_5fold/protein_sim/MF.csv",row.names =FALSE)
print('KIBA BP')
KIBA_sim_BP = get_similarity_data(KIBA_uniprot_BP, KIBA_protein_id, BP_data)
write.csv(KIBA_sim_BP,file="datasets/KIBA_5fold/protein_sim/BP.csv",row.names =FALSE)
print('KIBA CC')
KIBA_sim_CC = get_similarity_data(KIBA_uniprot_CC, KIBA_protein_id, CC_data)
write.csv(KIBA_sim_CC,file="datasets/KIBA_5fold/protein_sim/CC.csv",row.names =FALSE)
}
library(Rcpi)
MF_data <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
BP_data <- godata('org.Hs.eg.db', ont="BP", computeIC=FALSE)
CC_data <- godata('org.Hs.eg.db', ont="CC", computeIC=FALSE)
# DTI and CPI dataset GO sim
All_uniprot_MF = read.csv("processed_data/Uniprot_MF.csv",header=T,encoding = "UTF-8")
All_uniprot_BP = read.csv("processed_data/Uniprot_BP.csv",header=T,encoding = "UTF-8")
###########################################################################################################################
# Davis and KIBA
Davis_protein_id = read.csv("datasets/Davis_5fold/Uniprot_id.csv",header=T)
KIBA_protein_id = read.csv("datasets/KIBA_5fold/Protein.csv",header=T)
Davis_uniprot_MF = read.csv("datasets/Davis_5fold/GO/Uniprot_MF.csv",header=T,encoding = "UTF-8")
Davis_uniprot_BP = read.csv("datasets/Davis_5fold/GO/Uniprot_BP.csv",header=T,encoding = "UTF-8")
Davis_uniprot_CC = read.csv("datasets/Davis_5fold/GO/Uniprot_CC.csv",header=T,encoding = "UTF-8")
KIBA_uniprot_MF = read.csv("datasets/KIBA_5fold/GO/Uniprot_MF.csv",header=T,encoding = "UTF-8")
KIBA_uniprot_BP = read.csv("datasets/KIBA_5fold/GO/Uniprot_BP.csv",header=T,encoding = "UTF-8")
KIBA_uniprot_CC = read.csv("datasets/KIBA_5fold/GO/Uniprot_CC.csv",header=T,encoding = "UTF-8")
cal_GO_sim_DK()
rm(list = ls())
library(GOSemSim)
library(dplyr)
getwd()
get_similarity_data = function(Uniprot_GO, protein_id, GOsim_data){
colnames(Uniprot_GO)[1] = 'Uniprot_id'
n_protein = length(protein_id[,1])
protein_sim = matrix(nr=n_protein,nc=n_protein)
for(i in 1:(n_protein-1)){
if (i %% 100 == 0){
print(i)
}
for(j in (i+1):n_protein){
protein1 = data.frame(Uniprot_id = protein_id[i,1])
protein2 = data.frame(Uniprot_id = protein_id[j,1])
GO_list1 = semi_join(Uniprot_GO,protein1,by="Uniprot_id")
GO_list2 = semi_join(Uniprot_GO,protein2,by="Uniprot_id")
GO_set1 = unlist(GO_list1[,2])
GO_set2 = unlist(GO_list2[,2])
protein_sim[i,j] = mgoSim(GO_set1, GO_set2, semData = GOsim_data, measure="Wang",combine = "BMA")
protein_sim[j,i] = protein_sim[i,j]
}
}
for(i in 1:n_protein){
protein_sim[i,i] = 1
}
protein_sim[is.na(protein_sim)] <- 0
return(protein_sim)
}
# DTI and CPI protein sim
cal_GO_sim_DK = function(){
print('Davis MF')
Davis_sim_MF = get_similarity_data(Davis_uniprot_MF, Davis_protein_id, MF_data)
write.csv(Davis_sim_MF,file="datasets/Davis_5fold/protein_sim/MF.csv",row.names =FALSE)
print('Davis BP')
Davis_sim_BP = get_similarity_data(Davis_uniprot_BP, Davis_protein_id, BP_data)
write.csv(Davis_sim_BP,file="datasets/Davis_5fold/protein_sim/BP.csv",row.names =FALSE)
print('Davis CC')
Davis_sim_CC = get_similarity_data(Davis_uniprot_CC, Davis_protein_id, CC_data)
write.csv(Davis_sim_CC,file="datasets/Davis_5fold/protein_sim/CC.csv",row.names =FALSE)
print('KIBA MF')
KIBA_sim_MF = get_similarity_data(KIBA_uniprot_MF, KIBA_protein_id, MF_data)
write.csv(KIBA_sim_MF,file="datasets/KIBA_5fold/protein_sim/MF.csv",row.names =FALSE)
print('KIBA BP')
KIBA_sim_BP = get_similarity_data(KIBA_uniprot_BP, KIBA_protein_id, BP_data)
write.csv(KIBA_sim_BP,file="datasets/KIBA_5fold/protein_sim/BP.csv",row.names =FALSE)
print('KIBA CC')
KIBA_sim_CC = get_similarity_data(KIBA_uniprot_CC, KIBA_protein_id, CC_data)
write.csv(KIBA_sim_CC,file="datasets/KIBA_5fold/protein_sim/CC.csv",row.names =FALSE)
}
MF_data <- godata('org.Hs.eg.db', ont="MF", computeIC=FALSE)
BP_data <- godata('org.Hs.eg.db', ont="BP", computeIC=FALSE)
CC_data <- godata('org.Hs.eg.db', ont="CC", computeIC=FALSE)
# DTI and CPI dataset GO sim
All_uniprot_MF = read.csv("processed_data/Uniprot_MF.csv",header=T,encoding = "UTF-8")
All_uniprot_BP = read.csv("processed_data/Uniprot_BP.csv",header=T,encoding = "UTF-8")
All_uniprot_CC = read.csv("processed_data/Uniprot_CC.csv",header=T,encoding = "UTF-8")
DTI_protein_id = read.csv("datasets/DTI/Protein_id.csv",header=T)
CPI_protein_id = read.csv("datasets/CPI/all_protein_id.csv",header=T)
###########################################################################################################################
# Davis and KIBA
Davis_protein_id = read.csv("datasets/Davis_5fold/Uniprot_id.csv",header=T)
KIBA_protein_id = read.csv("datasets/KIBA_5fold/Protein.csv",header=T)
Davis_uniprot_MF = read.csv("datasets/Davis_5fold/GO/Uniprot_MF.csv",header=T,encoding = "UTF-8")
Davis_uniprot_BP = read.csv("datasets/Davis_5fold/GO/Uniprot_BP.csv",header=T,encoding = "UTF-8")
Davis_uniprot_CC = read.csv("datasets/Davis_5fold/GO/Uniprot_CC.csv",header=T,encoding = "UTF-8")
KIBA_uniprot_MF = read.csv("datasets/KIBA_5fold/GO/Uniprot_MF.csv",header=T,encoding = "UTF-8")
KIBA_uniprot_BP = read.csv("datasets/KIBA_5fold/GO/Uniprot_BP.csv",header=T,encoding = "UTF-8")
KIBA_uniprot_CC = read.csv("datasets/KIBA_5fold/GO/Uniprot_CC.csv",header=T,encoding = "UTF-8")
cal_GO_sim_DK()
rm(list = ls())
